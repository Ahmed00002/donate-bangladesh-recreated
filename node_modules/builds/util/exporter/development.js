// During development, this module can be accessed like so:
//   import { saveCanvas } from 'texel/util/exporter'

// It will get optimized into no-op functions on bundle.

function post (url, opts = {}) {
  if (!('fetch' in window)) {
    return Promise.reject(new Error('It looks like you are on an older browser without the fetch() API. The texel/util/export features rely on newer browsers. Try using Chrome or FireFox.'));
  }
  return window.fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(opts)
  }).then(res => {
    if (res.status >= 200 && res.status < 300) {
      return res.json();
    } else {
      return res.text().then(text => {
        throw new Error(text);
      });
    }
  });
}

module.exports.saveFile = function (data, opts = {}) {
  return post('/texel-dev/exporter/saveFile', {
    output: opts.output,
    extension: opts.extension,
    encoding: opts.encoding || 'utf-8',
    file: opts.file,
    frame: opts.frame,
    totalFrames: opts.totalFrames,
    data: data
  });
};

module.exports.saveCanvas = function (canvas, opts = {}) {
  const { type, extension } = getImageType(opts.format);
  const base64 = getBase64(canvas, type, opts.quality);
  if (opts.onDataURI) opts.onDataURI(base64);
  return module.exports.saveFile(base64, Object.assign({ extension }, opts, { encoding: 'base64' }));
};

module.exports.getCanvasDataURL = function (canvas, opts = {}) {
  const { type } = getImageType(opts.format);
  return canvas.toDataURL(type, opts.quality);
};

module.exports.saveDataURL = function (datauri, opts = {}) {
  const start = datauri.indexOf('data:');
  if (start === -1) throw new Error('Must provide data URI with mime type included');
  const end = datauri.indexOf(';base64,', start);
  if (end === -1) throw new Error('Must pass data URI with Base64 encoding');
  const type = datauri.slice(start + 'data:'.length, end);
  const extension = getExtension(type);
  const dataStart = datauri.indexOf(';base64,', end + type);
  if (dataStart === -1) throw new Error('Cannot find data after Base64 encoding marker');
  const data = datauri.slice(dataStart + ';base64,'.length);
  return module.exports.saveFile(data, Object.assign({ extension }, opts, { encoding: 'base64' }));
};

function getBase64 (canvas, type, quality) {
  const datauri = canvas.toDataURL(type, quality);
  return datauri.slice(`data:${type};base64,`.length);
}

function getImageType (format = 'png') {
  switch (format) {
    case 'jpeg':
    case 'jpg':
      return { extension: '.jpg', type: 'image/jpeg' };
    case 'webp':
      return { extension: '.webp', type: 'image/webp' };
    case 'png':
    default:
      return { extension: '.png', type: 'image/png' };
  }
}

function getExtension (mime = 'image/png') {
  switch (mime) {
    case 'image/jpeg':
    case 'image/jpg':
      return '.jpg';
    case 'image/webp':
      return '.webp';
    case 'image/png':
    default:
      return '.png';
  }
}
