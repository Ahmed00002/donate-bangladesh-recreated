const createExporterMiddleware = require('./createExporterMiddleware');
const path = require('path');
const browserify = require('browserify');
const inject = require('connect-inject');
const URL = require('url');

module.exports = function (opts = {}) {
  let devServerBundle;
  const isDebugClient = true;
  const devServerClient = path.resolve(__dirname, 'client.js');
  const devClientBrowserify = browserify(devServerClient, { debug: isDebugClient });
  const exporterMiddleware = createExporterMiddleware(opts);

  const clientUrl = '/texel-dev/client.js';
  const prepend = (w, s) => s + w;
  const append = (w, s) => w + s;

  // Client injector
  const injector = inject({
    rules: [ {
      match: /<body[^>]*>/i,
      fn: append
    }, {
      match: /<head[^>]*>/i,
      fn: append
    }, {
      match: /<script[^>]*>/i,
      fn: prepend
    }, {
      match: /<\/body>/,
      fn: prepend
    }, {
      match: /<\/html>/,
      fn: prepend
    }, {
      match: /<!DOCTYPE[^>]*>/,
      fn: append
    } ],
    snippet: `<script src="${clientUrl}"></script>`
  });

  return (req, res, next) => {
    if (URL.parse(req.url).pathname === clientUrl) {
      const done = (src) => {
        res.set('Content-Type', 'application/javascript');
        res.status(200);
        if (isDebugClient) res.end(src); // ignore express cache
        else res.send(src); // allow express to cache
      };
      if (devServerBundle) {
        done(devServerBundle);
      } else {
        devClientBrowserify.bundle((err, src) => {
          if (err) {
            console.error('Error bundling dev server client:\n' + err.message);
            res.status(500);
            res.end(err.message);
          } else {
            src = src.toString();
            if (!isDebugClient) devServerBundle = src;
            done(src);
          }
        });
      }
    } else {
      exporterMiddleware(req, res, () => injector(req, res, next));
    }
  };
};
