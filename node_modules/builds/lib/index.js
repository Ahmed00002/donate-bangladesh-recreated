const parseArgs = require('./parseArgs');
const createSync = require('./createSync');
const createBundlerImpl = require('./createBundler');
const writeBundleResult = require('./writeBundleResult');

module.exports.start = start;
module.exports.bundle = bundle;
module.exports.createBundler = createBundler;
module.exports.cli = cli;

function start (opts = {}) {
  opts = Object.assign({ mode: 'development' }, opts);
  opts = parseArgs.makeDefaults(opts);
  return createSync(opts);
}

function bundle (opts = {}) {
  opts = Object.assign({ mode: 'production' }, opts);
  opts = parseArgs.makeDefaults(opts);
  return createBundler(opts)
    .bundle()
    .then(result => writeBundleResult(result, opts));
}

function createBundler (opts = {}) {
  opts = Object.assign({ mode: 'production' }, opts);
  opts = parseArgs.makeDefaults(opts);

  if (opts.entries.length === 0) {
    throw new Error('No entries specified');
  }

  return createBundlerImpl(opts);
}

function cli (args, opts = {}) {
  const argv = parseArgs.raw(args, opts);
  if (argv.version) {
    const version = require('../package.json').version;
    return console.log(version);
  }

  switch (argv.command) {
    case 'start': return module.exports.start(argv);
    case 'bundle': return module.exports.bundle(argv);
    default: throw new Error(`Invalid command ${argv.command}`);
  }
}
