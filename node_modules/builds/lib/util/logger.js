const chalk = require('chalk');
const readline = require('readline');
const wrap = require('cli-format').wrap;

module.exports = function (opts = {}) {
  const quiet = opts.quiet;
  const stdout = process.stderr;
  const wordWrap = str => wrap(str, { paddingLeft: '  ', paddingRight: '  ', width: stdout.columns });
  const getWrappedPadded = str => `\n${wordWrap(str)}\n`;

  let supportsClearAndColor = opts.colors && chalk.supportsColor;
  let prevLines = 0;
  const noStatus = false;

  const writeLine = (msg, n = 0) => {
    if (!supportsClearAndColor) return console.error(msg);
    readline.cursorTo(stdout, 0);
    readline.moveCursor(stdout, 0, -n);
    stdout.write(`${msg}\n`);
    readline.clearLine(stdout, 1);
    readline.cursorTo(stdout, 0);
    readline.moveCursor(stdout, 0, n);
  };

  const icon = (icon, str) => output(`${chalk.bold(chalk.green(icon))} ${str}`);

  const clearLines = (n) => {
    if (!supportsClearAndColor || n <= 0) return;
    while (n > 0) {
      readline.clearLine(stdout, 0);
      readline.moveCursor(stdout, 0, -1);
      n--;
    }
    readline.clearLine(stdout, 0);
    readline.cursorTo(stdout, 0);
  };

  const output = msg => {
    if (prevLines) {
      clearLines(prevLines);
      prevLines = 0;
    }
    if (!quiet) console.error(msg);
  };

  return {
    status: function (str, color = 'dim', bulletColor = 'dim') {
      if (quiet || noStatus) return;

      let bullet = `${chalk.bold('â†’')}`;
      if (bulletColor) bullet = chalk[bulletColor](bullet);
      if (color) str = chalk[color](str);
      str = `${bullet} ${str}`;

      if (prevLines > 0) {
        clearLines(prevLines);
        prevLines = 0;
      }
      writeLine(str, 0);
      prevLines = str.split('\n').length;
    },
    statusError: function (str, headerMessage = 'Error') {
      if (quiet) return;

      let bullet = `${chalk.bold(chalk.dim('â†’'))}`;
      let header = `${bullet} ${chalk.dim(headerMessage)}`;
      const wrapped = wrap(str.trim(), { paddingLeft: '', paddingRight: '', trimEndOfLine: true, trimStartOfLine: false, width: stdout.columns - 5 });
      const message = `${header}\n\n ðŸš¨  ${wrapped}\n`;
      if (noStatus) {
        output(message);
      } else {
        if (prevLines > 0) {
          clearLines(prevLines);
          prevLines = 0;
        }
        writeLine(message, 0);
        prevLines = Math.max(0, message.split('\n').length);
      }
    },
    clearStatusError: function () {
      // TODO: Might be nice to remove old error messages.
    },
    bullet: function (str) {
      icon('â†’', str);
    },
    ok: function (str) {
      icon('âœ”', str);
    },
    fail: function (str) {
      icon('âœ–', str);
    },
    wrap: function (str) {
      output(getWrappedPadded(str));
    },
    error: function (err) {
      const result = err.isSimpleError
        ? wordWrap(`${chalk.red('ERROR:')} ${err.message}`)
        : err.toString().trim();
      output(`\n${result}\n`);
    },
    warn: function (str) {
      output(getWrappedPadded(`${chalk.yellow('WARN:')} ${str}`));
    },
    info: function (str) {
      output(getWrappedPadded(`${chalk.cyan('INFO:')} ${str}`));
    }
  };
};
