var Shader = require('./Shader');
var shaderMap = {};

module.exports.loadShader = function (_, code, filename) {
  var shader = new Shader(code, filename);
  // Cache the emitter
  if (filename) {
    if (!(filename in shaderMap)) shaderMap[filename] = [];
    shaderMap[filename].push(shader);
  }
  return shader;
};

module.exports.createShader = function (code) {
  return new Shader(code);
};

if ('texel-dev-client' in window) {
  window['texel-dev-client'].listen(function (data) {
    if (data.event === 'glsl' && data.file && typeof data.code === 'string') {
      _reload(data.file, data.code);
    }
  });
} else {
  console.warn('LiveReload is disabled, GLSL files will not be updated.');
}

function _reload (filename, code) {
  if (filename in shaderMap) {
    shaderMap[filename].forEach(shader => {
      var oldCode = shader.code;
      shader.code = code;
      shader.emit('touch');
      if (oldCode !== code) {
        shader.emit('change', code, oldCode);
      }
    });
  }
}
