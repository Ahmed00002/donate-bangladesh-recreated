require('./style.css');

const defined = require('defined');
const getContext = require('get-canvas-context');
const exampleSketch = `  export settings = {
    width: 256,
    height: 256
  };

  export default function () {
    return {
      draw: function ({ context }) {
        /* Draw with canvas context here. */
      }
    }
  }`;

const main = require(process.env.TEXEL_ENTRIES[0]);

if (!main) console.warn(`It looks like you are using --sketch mode, but there are no entry modules given to the bundler.`);

create(main);

// function start (result, context, settings) {
  
//   console.log('Finished loading', result);
//   if (typeof result.draw === 'function') result.draw({});
// }

function create (sketch = {}) {
  const settings = sketch.settings || {};

  let context = settings.context || '2d';
  let canvas = settings.canvas || getDefaultCanvas(context);

  if (typeof context === 'string') {
    console.log('context', context);
    context = getContext(context, { canvas });
  }

  if (context.canvas !== canvas) {
    console.warn('The { context } and { canvas } settings belong to different elements. You should pass one or the other, or ensure they both point to the same underlying canvas.');
    canvas = context.canvas;
  }

  const app = {
    canvas,
    context,
    width: 0,
    height: 0,
    pixelRatio: 0,
    time: 0
  };

  const isCanvas2D = isCanvasContext2D(context);
  const sketchFunc = sketch.default;
  if (typeof sketchFunc === 'function') {
    const result = sketchFunc();
    if (result && typeof result.then === 'function') {
      result.then(start);
    } else if (result) {
      setTimeout(() => start(result), 0);
    }
  } else {
    console.warn(`Your sketch file does not export a default function. It should look something like this:\n\n${exampleSketch}`);
  }

  function start (result) {
    console.log('loaded', result);
  }

  function setSize (matchSize = false) {
  }
}

function isCanvasContext2D (context) {
  return typeof context.bindBuffer !== 'function' && typeof context.scissor !== 'function';
}

function getDefaultCanvas (context) {
  if (context && context.canvas) return context.canvas;
  const canvas = document.createElement('canvas');
  document.body.appendChild(canvas);
  return canvas;
}
