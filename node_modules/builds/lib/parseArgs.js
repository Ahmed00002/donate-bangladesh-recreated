const minimist = require('minimist');
const defined = require('defined');
const path = require('path');
const getDefaultHTML = require('./util/getDefaultHTML');
const resolveEntry = require('./util/resolve-entry');
const createLogger = require('./util/logger');
const fs = require('fs');

const defaultSketchEntry = path.resolve(__dirname, 'plugins/sketch/entry.js');

module.exports = function (args, opts = {}) {
  return module.exports.makeDefaults(module.exports.raw(args, opts));
};

module.exports.raw = parseArgsRaw;
function parseArgsRaw (args, opts = {}) {
  const availableCommands = [
    'start', 'bundle'
  ];

  let command = 'start';
  if (availableCommands.includes(args[0])) {
    command = args[0];
    args = args.slice(1);
  }

  const defaultMode = command === 'bundle' ? 'production' : 'development';

  let argv = minimist(args, {
    boolean: [
      'quiet',
      'open',
      'liveShader',
      'cors',
      'version',
      'welcome',
      'node',
      'colors'
    ],
    string: [
      'js',
      'css',
      'port',
      'host',
      'dir',
      'cwd',
      'mode'
    ],
    alias: {
      liveShader: 'live-shader',
      host: 'h',
      open: 'o',
      port: 'p',
      cors: 'C',
      dir: 'd',
      version: 'v',
      sketch: 's'
    },
    '--': true,
    default: {
      quiet: false,
      colors: true,
      js: '/bundle.js',
      css: '/bundle.css',
      welcome: true
    }
  });
  argv.mode = argv.mode || defaultMode;
  argv.browserifyArgs = argv['--'];
  argv.command = command;
  delete argv['--'];
  return Object.assign({}, argv, opts);
}

module.exports.makeDefaults = function (opts = {}) {
  opts = Object.assign({}, opts);
  opts.mode = defined(opts.mode, process.env.NODE_ENV, 'development');
  opts.cwd = path.resolve(opts.cwd || process.cwd());

  opts.entries = [].concat(defined(opts.entries, opts._))
    .filter(Boolean)
    .map(f => resolveEntry(f, opts.cwd));

  opts.node = Boolean(opts.node);

  // If --no-env is specified, don't include process.env values
  // e.g. may be useful for security or for bundling node
  const defaultEnv = (opts.node || opts.env === false) ? {} : process.env;
  opts.env = Object.assign({}, defaultEnv, opts.env, {
    NODE_ENV: opts.mode === 'production' ? 'production' : 'development',
    TEXEL_ENTRIES: opts.entries
  });
  opts.minify = defined(opts.minify, opts.mode === 'production');
  opts.port = defined(opts.port, process.env.PORT, 9966);
  opts.dir = path.resolve(opts.dir || opts.cwd);
  opts.js = defined(opts.js, '/bundle.js');
  opts.colors = opts.colors !== false;
  opts.css = defined(opts.css, '/bundle.css');
  opts.browserifyArgs = opts.browserifyArgs || [];
  opts.quiet = Boolean(opts.quiet);
  opts.welcome = opts.welcome !== false;
  opts.cors = Boolean(opts.cors);
  opts.open = Boolean(opts.open);
  opts.debug = defined(opts.debug, opts.mode === 'development');
  if (typeof opts.sketch === 'string' && opts.sketch) {
    opts.sketch = resolveEntry(opts.sketch, opts.cwd);
  } else if (opts.sketch) {
    opts.sketch = defaultSketchEntry;
  } else {
    opts.sketch = undefined;
  }
  opts.welcome = defined(opts.welcome, opts.mode === 'development');
  opts.log = defined(opts.log, opts.mode === 'production');
  opts.compress = defined(opts.compress, opts.mode === 'production');
  delete opts._;
  delete opts.command;

  opts.defaultHTML = getDefaultHTML(opts);
  opts.package = readPackage(opts.cwd);
  opts.logger = createLogger(opts);
  return opts;
};

function readPackage (cwd) {
  const file = path.resolve(cwd, 'package.json');
  try {
    return JSON.parse(fs.readFileSync(file, 'utf-8'));
  } catch (err) {
    return undefined;
  }
}
