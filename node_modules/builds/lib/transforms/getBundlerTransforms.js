const { PassThrough } = require('stream');
const createBabelify = require('../babel');
const createShaderImport = require('./createShaderImport');
const transformFilter = require('./transform-filter');
const getJSXPlugins = require('./getJSXPlugins');

module.exports = function (opts = {}) {
  const cwd = opts.cwd || process.cwd();

  const env = opts.env;
  const isNode = opts.node;
  const processEnvPlugin = [
    require('../babel/plugins/babel-process-env'),
    { env }
  ];

  let envUseBuiltIns = false;
  if (opts.polyfill) {
    envUseBuiltIns = opts.optimize ? 'usage' : 'entry';
  }

  const transforms = [
    // First we transform direct require/import './foo.glsl' paths
    createShaderImport(opts),
    // Lastly, we apply typical ES6-ES5 source mapping and other common presets
    createBabelify({
      sourceMaps: opts.debug !== false ? 'inline' : false,
      babelrc: true,
      plugins: [
        // Include shader importing
        [ require('../babel/plugins/babel-shader-import'), {
          mode: opts.mode,
          cwd: opts.cwd
        } ],
        // In production, we will insert an entire process-env pass,
        // so we can skip it in the top-level babel transform
        opts.mode !== 'production'
          ? processEnvPlugin
          : null,
        // Apply require.resolve() transforms, but not in node mode
        isNode ? null : require('../babel/plugins/babel-require-resolve'),
        require('@babel/plugin-proposal-object-rest-spread'),
        require('@babel/plugin-proposal-class-properties'),
        [ require('@babel/plugin-transform-runtime'), { helpers: false, polyfill: false } ]
      ].concat(getJSXPlugins(opts)).filter(Boolean),
      presets: [
        [ require('@babel/preset-env'), {
          useBuiltIns: envUseBuiltIns,
          targets: {
            browsers: opts.browserslist
          }
        } ]
      ]
    }),
    require('glslify')
  ];

  // in production, we process-env-ify everything
  if (opts.mode === 'production') {
    transforms.unshift(createBabelify({
      // Filter out any files that don't contain process.env
      filter: src => {
        return /process\.env\./.test(src);
      },
      sourceMaps: false,
      babelrc: false,
      plugins: [ processEnvPlugin ]
    }));
  }

  return transforms.map(tr => {
    const fn = (file, tOpt) => {
      if (!transformFilter(file, cwd)) return new PassThrough();
      return tr(file, tOpt);
    };
    return [ fn, { global: true } ];
  });
};
