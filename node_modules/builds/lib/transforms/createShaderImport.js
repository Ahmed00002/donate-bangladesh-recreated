const through = require('through2');
const duplexer = require('duplexer2');
const concat = require('concat-stream');
const { isGLSL } = require('../util/extensions');
const compileGlslify = require('../util/compile-glslify');
const getModuleNotFound = require('../util/get-module-not-found');
const { PassThrough } = require('stream');

module.exports = function (opts = {}) {
  const cwd = opts.cwd || process.cwd();

  return function (file, pluginOpts = {}) {
    if (!isGLSL(file)) return new PassThrough();
    const basedir = pluginOpts.basedir || cwd;
    const mode = opts.mode === 'production' ? opts.mode : 'development';
    const requireId = module.exports.requireIds[mode];

    const output = through();
    const stream = duplexer(concat(buf => {
      const code = buf.toString();
      let result;
      try {
        result = compileGlslify(file, {
          cwd: basedir,
          inline: code
        });
        result.dependencies.forEach(dep => {
          stream.emit('file', dep);
        });
      } catch (err) {
        const id = getModuleNotFound(err);
        if (id) {
          stream.emit('missing', { id, type: 'glsl', parent: file });
        } else {
          stream.emit('error', err);
        }
      }
      const glslCode = result ? result.code : '';
      const fileForMode = mode !== 'production' ? file : '';
      output.push(`const loadShader = require('${requireId}').loadShader;
module.exports = loadShader(true, ${JSON.stringify(glslCode)}, ${JSON.stringify(fileForMode)});
`);

      stream.emit('glsl', {
        filename: file,
        code: glslCode
      });
      output.push(null);
    }), output);
    return stream;
  };
};

module.exports.requireIds = {
  production: 'texel/util/_shader_prod',
  development: 'texel/util/_shader_dev'
};
