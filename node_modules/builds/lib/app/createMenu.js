const { app, Menu } = require('electron');
const { EventEmitter } = require('events');
const electronLocalshortcut = require('electron-localshortcut');

module.exports = function () {
  const emitter = new EventEmitter();

  // Should remove these in production version of the app
  const reloadAll = {
    label: 'Reload All',
    accelerator: 'CmdOrCtrl+Shift+R',
    click: () => emitter.emit('reloadAll')
  };
  const windowDevTools = {
    label: 'Toggle Window DevTools',
    accelerator: 'CmdOrCtrl+Alt+Shift+I',
    click: () => emitter.emit('toggleWindowDevTools')
  }

  const template = [
    {
      label: 'File',
      submenu: [
        {
          label: 'New Project',
          accelerator: 'CmdOrCtrl+N',
          click () {
          }
        },
        { type: 'separator' },
        {
          label: 'Open Project',
          accelerator: 'CmdOrCtrl+O',
          click () {
          }
        },
        {
          label: 'Open Recent',
          submenu: [
          ]
        },
        { type: 'separator' },
        {
          label: 'Close Project',
          accelerator: 'CmdOrCtrl+Shift+W',
          click () {
          }
        },
        {
          label: 'Close',
          accelerator: 'CmdOrCtrl+W',
          role: 'close'
        }
      ]
    },
    {
      label: 'Edit',
      submenu: [
        {role: 'undo'},
        {role: 'redo'},
        {type: 'separator'},
        {role: 'cut'},
        {role: 'copy'},
        {role: 'paste'},
        {role: 'pasteandmatchstyle'},
        {role: 'delete'},
        {role: 'selectall'}
      ]
    },
    {
      label: 'Project',
      id: 'project',
      submenu: [
        {
          label: 'Dependencies',
          submenu: [
            {
              label: 'Install',
              accelerator: 'CmdOrCtrl+I',
              click () {
              }
            },
            {
              label: 'Uninstall',
              accelerator: 'CmdOrCtrl+Shift+I',
              click () {
              }
            },
            { type: 'separator' },
            {
              label: 'Resolve Missing',
              accelerator: 'CmdOrCtrl+Shift+Alt+I',
              click () {
              }
            }
          ]
        },
        { type: 'separator' },
        {
          label: 'Helpers',
          submenu: [
            {
              label: 'Scaffold Project',
              click () {
                console.log('add .gitignore and package.json to folder');
              }
            }
          ]
        },
        { type: 'separator' },
        {
          label: 'Settings',
          accelerator: 'CmdOrCtrl+K',
          click () {
            console.log('project settings');
          }
        }
      ]
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Reload',
          accelerator: 'CmdOrCtrl+R',
          click: () => emitter.emit('reload')
        },
        reloadAll,
        {
          label: 'Toggle Developer Tools',
          accelerator: 'CmdOrCtrl+Alt+I',
          click: () => emitter.emit('toggleDevTools')
        },
        windowDevTools,
        { type: 'separator' },
        {
          label: 'Toggle Full Screen',
          accelerator: 'CmdOrCtrl+Shift+F',
          click: () => emitter.emit('toggleFullScreen')
        }
      ].filter(Boolean)
    },
    {
      role: 'window',
      submenu: [
        {role: 'minimize'},
        {role: 'close'}
      ]
    },
    {
      role: 'help',
      submenu: [
        {
          label: 'Documentation',
          click () {
            // open URL?
          }
        }
      ]
    }
  ];

  if (process.platform === 'darwin') {
    // App menu
    template.unshift({
      label: app.getName(),
      submenu: [
        {role: 'about'},
        {type: 'separator'},
        {role: 'hide'},
        {role: 'hideothers'},
        {role: 'unhide'},
        {type: 'separator'},
        {role: 'quit'}
      ]
    });

    // Window menu
    template.find(t => t.role === 'window').submenu = [
      // {role: 'close'},
      {role: 'minimize'}
      // {role: 'zoom'},
      // {type: 'separator'},
      // {role: 'front'}
    ];
  }

  emitter.create = () => {
    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
  };

  return emitter;
};
