const { app, BrowserWindow, BrowserView } = require('electron');
const config = require('./config');
const path = require('path');
const _windows = {};

const preload = require.resolve('./preload.js');

module.exports = class MainWindow {
  constructor (prefix = 'main-window') {
    app.once('before-quit', () => this.saveState());
    this.prefix = prefix;
    this.destroying = false;
  }

  create () {
    if (this.window) return;
    const isHighSierra = process.platform === 'darwin' && Number(require('os').release().split('.')[0]) >= 17;
    const prefix = this.prefix;
    this.window = new BrowserWindow({
      title: 'texel',
      titleBarStyle: isHighSierra ? null : 'hiddenInset',
      width: parseInt(config.get(`${prefix}-width`, 800), 10),
      height: parseInt(config.get(`${prefix}-height`, 600), 10),
      x: config.get(`${prefix}-x`),
      y: config.get(`${prefix}-y`),
      show: false,
      backgroundColor: '#292929',
      webPreferences: {
        preload,
        nodeIntegration: true,
        nodeIntegrationInWorker: true
      }
    });

    this.view = new BrowserView({
      backgroundColor: '#292929',
      webPreferences: {
        preload,
        nodeIntegration: false,
        nodeIntegrationInWorker: false
      }
    });
    this.view.webContents.on('devtools-reload-page', ev => {
      ev.preventDefault();
      console.log('Todo: Should also reload main window?');
    });
    this.view.webContents.on('update-target-url', (ev, url) => {
      console.log('User hovering over link:', url);
    });
    this.view.webContents.on('crashed', (ev, killed) => {
      console.log('ERROR, renderer process killed', killed);
    });
    this.view.webContents.on('did-navigate-in-page', (ev, url) => {
      console.log('Soft URL change', url);
      this.window.webContents.send('url-change', url);
    });
    this.view.webContents.on('will-navigate', (ev, url) => {
      console.log('Will Hard URL change', url);
    });
    this.view.webContents.on('did-navigate', (ev, url) => {
      console.log('Hard URL change', url);
      this.window.webContents.send('url-change', url);
    });
    this._viewVisible = false;
    this.window.on('resize', () => this.updateViewBounds());
    this.updateViewBounds();

    if (process.platform === 'darwin') {
      this.window.setSheetOffset(40);
    }

    this.id = this.window.id;
    _windows[this.id] = this.window;

    this.destroying = false;
    this.window.unref = this.unref.bind(this);
    this.window.once('close', () => this.saveState());
    this.window.once('closed', () => this.unref());

    this.window.once('ready-to-show', () => this.window.show());
    // this.setWelcomeVisible(true);
    this.window.loadFile(path.resolve(__dirname, 'toolbar.html'));
    
    // this.loadDevToolState();
  }

  setWelcomeVisible (welcome) {
    // this.window.loadFile(path.resolve(__dirname, welcome ? 'welcome.html' : 'toolbar.html'));
  }

  loadView (url) {
    // this.setWelcomeVisible(false);
    this.view.webContents.loadURL(url);
    this.setViewVisible(true);
    this.view.webContents.openDevTools({ mode: 'bottom' });
    // this.window.webContents.openDevTools({ mode: 'detach' });
  }

  reload () {
    if (this.view) this.view.webContents.reload();
  }

  toggleDevTools () {
    if (this.view && this._viewVisible) this.view.webContents.toggleDevTools();
  }

  loadDevToolState (ready = (() => {})) {
    const prefix = this.prefix;
    const win = this.window;
    const showDevTools = config.get(`${prefix}-devtools-open`, 'true') === 'true';
    const isDevToolOpen = win.webContents.isDevToolsOpened();
    const next = () => process.nextTick(() => ready());
    if (!showDevTools && isDevToolOpen) {
      win.webContents.closeDevTools();
      next();
    } else if (showDevTools && !isDevToolOpen) {
      const defaultState = { mode: 'undocked' };
      win.webContents.openDevTools(defaultState);
      win.webContents.once('devtools-opened', ready);
    } else {
      next();
    }
  }

  updateViewBounds () {
    if (!this.window || this.destroying || !this.view) return;
    const { width, height } = this.window.getContentBounds();
    this.view.setBounds({ x: 0, y: 40, width, height: height - 40 });
  }

  destroy () {
    if (!this.window || this.destroying) return;
    this.destroying = true;
    this.window.close();
  }

  unref () {
    this.destroying = false;
    if (this.id != null) {
      delete _windows[this.id];
      this.window = null;
      this.view = null;
      this.id = null;
    }
  }

  saveState () {
    const win = this.window;
    if (!win) return;
    const prefix = this.prefix;
    config.set(`${prefix}-devtools-open`, win.webContents.isDevToolsOpened() ? 'true' : 'false');
    if (!win.isFullScreen()) {
      const { x, y, width, height } = win.getBounds();
      config.set(`${prefix}-x`, x);
      config.set(`${prefix}-y`, y);
      config.set(`${prefix}-width`, width);
      config.set(`${prefix}-height`, height);
    }
  }

  setViewVisible (bool) {
    if (!this.window || this.destroying) return;
    if (this._viewVisible === bool) return;
    this._viewVisible = bool;
    this.window.setBrowserView(bool ? this.view : null);
    if (bool) this.updateViewBounds();
  }
};
